# -*- coding: utf-8 -*-
"""WineShop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QHyf4-kdKz8Ij2PtQlQCcsPiSrXBWhvg
"""

import pandas as pd
import requests
from bs4 import BeautifulSoup as BS
import time
agent = {"User-Agent":'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'}
ROOT_URL = "https://majestic.co.uk"

def flatten(_2d_list):
  out_list = []
  for _1d in _2d_list:
    for element in _1d:
      out_list.append(element)
  return out_list

def get_characteristics(specific_wine_page, agent, delay=0):
  page = requests.get(specific_wine_page, headers=agent)
  soup = BS(page.content, 'html.parser')
  results = soup.find_all("tr")
  info_dict = {}
  for result in results:
    td_tags = result.find_all("td")
    if td_tags[0].text == "Characteristics":
      info_dict[td_tags[0].text] = td_tags[1].text.split(", ")
    else:
      info_dict[td_tags[0].text] = td_tags[1].text
  time.sleep(delay)
  return {"name":soup.find("h1", {"class":"product-info__name d-none-mobile"}).text, "info":info_dict}

def get_urls(list_of_wine_page, agent, ROOT_URL):
  page = requests.get(list_of_wine_page, headers=agent)
  soup = BS(page.content, 'html.parser')
  wine_container = soup.find_all("div", {"class":"product-box-product-info"})
  urls = [wine.find("a", href=True)["href"] for wine in wine_container]
  return [ROOT_URL + url for url in urls]


def get_max_page(page_size):
  base_url = "https://www.majestic.co.uk/wine?pagesize=" + str(page_size) + "&paginationtype=10&pagenumber=1"
  page = requests.get(base_url, headers=agent)
  soup = BS(page.content, 'html.parser')
  last_page = soup.find_all('li', {"class":"last-page"})
  return [p.find("a", href=True).text for p in last_page][0]

def main_get_info(page_size, ROOT_URL):
  baseurl = "https://www.majestic.co.uk/wine?pagesize=" + str(page_size) + "&paginationtype=10&pagenumber="
  max_page = int(get_max_page(32))
  wine_urls = []
  for i in range(1, max_page + 1):
    page_number = str(i)
    url = baseurl + page_number
    wine_urls.append(get_urls(url, agent, ROOT_URL))
    #REMOVE this if statement to loop through ALL of Website
    if i == 1:
      break
  wine_urls = flatten(wine_urls)
  all_out = [get_characteristics(url, agent) for url in wine_urls]
  return all_out

def framify(list_of_dictionaries):
  """
  Take a list of similar dictionaries and output into a single dataframe, expands 'info' column which is a dictionary
  into a dataframe and appends to the original
  """
  df = pd.DataFrame(list_of_dictionaries)
  df = pd.concat([df.drop(["info"], axis=1), df["info"].apply(pd.Series)], axis=1)
  return df

